generate_email("John Andrew Thomas")
generate_email(" ")
grepl("^\\s*$","  ")
generate_email <- function(name) {
if (grepl("^\\s*$", your_string)==TRUE){
res=""} else{
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')
}
return(res)
}
generate_email(" ")
generate_email <- function(name) {
if (grepl("^\\s*$", your_string)==TRUE){
res="" }  else{
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')
}  return(res)
}
generate_email <- function(name) {
if (grepl("^\\s*$", your_string)==TRUE){
res="" }  else{
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')}
return(res)
}
generate_email(" ")
if (grepl("^\\s*$", '')
==TRUE
{2+2}
isTRUE(grepl("^\\s*$", '')
}
isTRUE(grepl("^\\s*$", '  '))
isTRUE(grepl("^\\s*$", '  e'))
generate_email <- function(name) {
if (isTRUE(grepl("^\\s*$",name))){
res="" }  else{
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')
}
return(res)
}
generate_email(" ")
generate_email("John Andrew Thomas")
string <- "  Hi buddy   what's up   Bro "
library(stringr)
str_replace(gsub("\\s+", " ", str_trim(string)), "B", "b")
str_replace(gsub("\\s+", " ", str_trim(string)))
library(qdapRegex)
rm_white(string)
install.packages("qdapRegex")
library(qdapRegex)
rm_white(string)
rm_white("    John Andrew Thomas")
name <- "John Andrew Thomas"
name <- "John Andrew   Thomas"
name= rm_white(name)
name
name <- "John Andrew   Thomas"
name
gsub("\\s+"," ",name)
name <- "  John Andrew   Thomas"
gsub("\\s+"," ",name)
name <- "  John Andrew   Thomas  "
gsub("\\s+"," ",name)
trimws(name)
name
trimws(name)
gsub("\\s+"," ",name)
n1=gsub("\\s+"," ",name)
trimws(n1)
days = c("Friday", "Sunday", "Monday", "Sunday", "Wednesday")
days=factor(days)
days
days = c("Friday", "Sunday", "Monday", "Sunday", "Wednesday")
days1=paste(days,sep = '<')
days1
days1=paste(days,collapse= '<')
days1
days1=paste(days,collapse= ' < ')
days1
days1=factor(paste(days,collapse= ' < '))
days1
days = c("Friday", "Sunday", "Monday", "Sunday", "Wednesday")
days2= days1(levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"))
days2= (days1, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"))
days2= days1, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday")
days1=factor(paste(days,collapse= ' < '),levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"))
days1
days1=factor(paste(days,collapse= ' < '))
days1
days1=factor(days1,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"))
days1
factor(days,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"),ordered=TRUE)
days
days1=factor(days,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"),ordered=TRUE)
days1
days1=factor(days,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"),ordered=FALSE)
days1
days = c("Friday", "Sunday", "Monday", "Sunday", "Wednesday")
days=factor(days,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"),ordered=TRUE)
days
summary(days)
descibe(days)
description(days)
fert = c(10,20,20,50,10,20,10,50,20)
summary(fert)
fert1 = factor(fert,levels=c(10,20,50),ordered=TRUE)
summary(fert1)
fert = c(10,20,20,50,10,20,10,50,20,30)
summary(fert)
fert1 = factor(fert,levels=c(10,20,50),ordered=TRUE)
summary(fert1)
as.numeric(levels(fert)[fert])
as.numeric(levels(fert1)[fert1])
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}else{
(testvalue =testvalue- 1)
}
}
return(res)
}
gcdIter(10,4)
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}else{
(testvalue =testvalue- 1)
}
}
return(res)
}
summary(getIter)
summary(gcdIter)
gcdIter
gcdIter(10,20)
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}else{
(testvalue =testvalue- 1)
}
}
return(res)
}
testvalue =testvalue- 1
testvalue=5
testvalue =testvalue- 1
testvalue
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
break
}
testvalue =testvalue- 1
}
return(res)
}
gcdIter(4,5)
gcdIter(4,6)
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
}else{
res=gcd(c, d %% c)
}
return(res)
}
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
break
}else{
res=gcd(c, d %% c)
}
return(res)
}
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
break
}else{
res=gcd(c, d %% c)
}
return(res)
}
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0)
res=c
break
else{
res=gcd(c, d %% c)
}
return(res)
}
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
break
}else{
res=gcd(c, d %% c)
}
return(res)
}
gcdRecur <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
return(res)
}
5%%3=0
5%%3==0
a=2
b=5
c=min(a,b)
d=max(a,b)
c
d
If (d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
If (d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
return(res)
gcdRecur <- function(a, b){
c = min(a,b)
d = max(a,b)
If(d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
return(res)
}
d%%c==0
gcdRecur <- function(a, b){
c = min(a,b)
d = max(a,b)
if(d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
return(res)
}
gcdRecur(54,20)
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}
testvalue =testvalue- 1
}
return(res)
}
gcdIter(4,6)
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}else{
testvalue =testvalue- 1
}
}
return(res)
}
gcdIter(4,6)
A
n=1:15
r=0.115
P=5000
A = P*(1+r)^n
A
print(A)
mass = c(180,165,160,193)
height =c(87,58,65,100)
BMI = mass/(height*0.01)^2
height>6
height>6*12*2.54
height
height = c(180,165,160,193)
mass =c(87,58,65,100)
BMI = mass/(height*0.01)^2
height>6*12*2.54
data(cars)
head(cars)
head(cars,5)
head(cars)
View(cars)
dim(cars)[1]
cars_dim=dim(cars)
cars_dim=dim(cars)
cars_dim
dim(cars_dim)
class(cars_dim)
cars_dim[1]
cars_dim[2]
cars$state = sample(c('NY', 'CA', 'CT'), cars_dim[1])
cars$state = sample(c('NY', 'CA', 'CT'), cars_dim[1], replace=TRUE)
View(cars)
set.seed(0)
cars$state = sample(c('NY', 'CA', 'CT'), cars_dim[1], replace=TRUE)
View(cars)
head(cars,5)
nrows(cars[(cars$state=='CT'),])
nrow(cars[(cars$state=='CT'),])
nrow(cars[(cars$state=='NY'),])
nrow(cars[(cars$state=='CA'),])
cars$ratio = cars$dist/cars$speed
avg = mean(cars$ratio)
st_ratio = sd(cars$ratio)
avg
st_ratio
cars_avg = mean(cars$ratio)
cars_std = sd(cars$ratio)
print('average ratio ='cars_avg)
print({'average ratio ='cars_avg})
print('average ratio =')
print('average ratio =',print({'average rat)
}
{}
)
)))
sds
exit
print({'average ratio ='cars_avg})
print(['average ratio ='cars_avg])
print(('average ratio ='cars_avg))
sprintf(average ratio = %1.23f",cars_avg)
sprintf("average ratio = %1.23f",cars_avg)
sprintf("average ratio = %1.11f",cars_avg)
sprintf("average ratio = %1.1f",cars_avg)
sprintf("average ratio = %1.10f",cars_avg)
cars_avg
exit
quit()
exit
quit()
install.packages("igraph")
quit()
load("data.RData")
setwd("~/Dropbox/ted-talks/")
load("data.RData")
save(ted_rating_image,ted,talks_year,ratings,MW,MW_LC,LW_MC,MW_MC,ted_speaker_occupation,ted_corr,df_final,mean_CperV,median_CperV,file = "data.RData")
quit()
getwd()
load("data.RData")
ratings_top = df_final %>% group_by(name) %>% summarise(Top_10_talks=top_n(10,count))
library(anytime)
library(dplyr)
library(ggplot2)
library(stringr)
library(treemap)
library(qdapRegex)
library(googleVis)
library(rjson)
library(rsconnect)
library(wordcloud)
library(tm)
library(DT)
library(corrplot)
library(plyr)
library(jpeg)
ratings_top = df_final %>% group_by(name) %>% summarise(Top_10_talks=top_n(10,count))
ratings_top = df_final %>% summarise(Top_10_talks=top_n(10,count))
ratings_top = df_final %>% group_by(name) %>% summarise(max_rating_talk=max(count))
View(ratings_top)
ratings_top = df_final %>% group_by(name)
View(ratings_top)
View(ratings_top)
names(df_final)
ratings_top = df_final %>% group_by(df_final$name) %>% summarise(max_rating_talk=max(count))
ratings_top = df_final %>% group_by(df_final$name) %>% summarise(top_ratings=top_n(2,count))
detach("package:plyr", unload=TRUE)
ratings_top = df_final %>% group_by(df_final$name) %>% summarise(top_ratings=top_n(2,count))
heat(df_final,2)
head(df_final,2)
str(df_final,2)
ratings_top = df_final %>% group_by(as.String(name)) %>% summarise(top_ratings=top_n(2,count))
ratings_top = df_final %>% group_by(as.String(df_final$name)) %>% summarise(top_ratings=top_n(2,count))
library(tidyr)
df_final %>%
group_by(name) %>%
summarise(top_ratings=top_n(2,count))
df_final %>%
group_by(name) %>%
summarize(top_ratings=top_n(2,count))
detach(package:plyr)
detach(package:plyr)
detach(package:"plyr")
detach(plyr)
library(dplyr)
ratings_top = df_final %>% group_by(as.String(df_final$name)) %>% summarise(top_ratings=top_n(2,count))
load("data.RData")
ratings_top = df_final %>% group_by(as.String(df_final$name)) %>% summarise(top_ratings=top_n(2,count))
library(anytime)
library(dplyr)
library(ggplot2)
library(stringr)
library(treemap)
library(qdapRegex)
library(googleVis)
library(rjson)
library(rsconnect)
library(wordcloud)
library(tm)
library(DT)
library(corrplot)
#library(plyr)
library(jpeg)
library(tidyr)
ratings_top = df_final %>% group_by(as.String(df_final$name)) %>% summarise(top_ratings=top_n(2,count))
ratings_top = df_final %>% group_by(name) %>% summarise(top_ratings=top_n(2,count))
ratings_top = df_final %>% group_by(name) %>% summarise(top_ratings=mean(count))
View(ratings_top)
View(df_final)
ratings_top = df_final %>% group_by(name) %>% summarise(ratings_mean=mean(count),ratings_median=median(count))
View(ratings_top)
View(df_final)
u1=ted$ratings[]
u1 = gsub("\'","\"",u1)
cols <- c('id','name','count','talk_name')
df_final <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(df_final) <- cols
for (i in 1:length(u1)){
df = do.call("rbind.fill", lapply(fromJSON(u1[i]), as.data.frame))
df$talk_name = ted$name[i]
df_final <- rbind(df_final,df)
}
View(ted)
library(plyr)
length(u1)
for (i in 1:length(u1)){
df = do.call("rbind.fill", lapply(fromJSON(u1[i]), as.data.frame))
df$talk_name = ted$name[i]
df$year = ted$year[i]
df$views = ted$views[i]
df$comments = ted$comments[i]
df$Comments_per_1000views.C_1K_V = ted$Comments_per_1000views.C_1K_V[i]
df$year_num = ted$year_num[i]
df_final <- rbind(df_final,df)
}
df_final = df_final %>% mutate(rating_count_percentage=100*count/views)
class(df_final$year)
class(df_final$year_num)
ratings_top = df_final %>% group_by(name) %>% summarise(ratings_mean=mean(count),ratings_median=median(count))
View(ratings_top)
save(ted_rating_image,ted,talks_year,ratings,MW,MW_LC,LW_MC,MW_MC,ted_speaker_occupation,ted_corr,df_final,mean_CperV,median_CperV,file = "data.RData")
load("data.RData")
MR_MC = df_final[(df_final[,8]>1 & df_final[,10]>0.05),c("name","talk_name","rating_count_percentage","Comments_per_1000views.C_1K_V")]
MR = df_final[(df_final[,10]>0.25),c("name","talk_name","rating_count_percentage")]
View(df_final)
mean_median_CperV= ted %>% group_by(year_num) %>% summarize(mean_CperV=mean(Comments_per_1000views.C_1K_V,na.rm=TRUE),
median_CperV=median(Comments_per_1000views.C_1K_V,na.rm=TRUE))
library(anytime)
library(dplyr)
library(ggplot2)
library(stringr)
library(treemap)
library(qdapRegex)
library(googleVis)
library(rjson)
library(rsconnect)
library(wordcloud)
library(tm)
library(DT)
library(corrplot)
#library(plyr)
library(jpeg)
library(tidyr)
library(forcats)
mean_median_CperV= ted %>% group_by(year_num) %>% summarize(mean_CperV=mean(Comments_per_1000views.C_1K_V,na.rm=TRUE),
median_CperV=median(Comments_per_1000views.C_1K_V,na.rm=TRUE))
save(ted_rating_image,ted,talks_year,ratings,MW,MW_LC,LW_MC,MW_MC,MR,MR_MC,ted_speaker_occupation,ted_corr,df_final,mean_CperV,median_CperV,file = "data.RData")
save(ted_rating_image,ted,talks_year,ratings,MW,MW_LC,LW_MC,MW_MC,MR,MR_MC,ted_speaker_occupation,ted_corr,df_final,mean_CperV,median_CperV,file = "data.RData")
shiny::runApp('ted_talks')
