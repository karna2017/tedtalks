paste_chars <- function(char_vec){
#  n = char_vec[1:length(char_vec)]
res = paste(c(as[1:length(as)],as[length(as):1]),c(as[1:length(as)],as[length(as):1]),sep="")
#    res = paste0(char_vec[1:length(char_vec)],n,sep="")
return(res)
}
paste_chars(c("a", "b"))
paste_chars <- function(char_vec){
#  n = char_vec[1:length(char_vec)]
res = paste(c(as[1:length(as)],as[1:length(as)]),c(as[1:length(as)],as[length(as):1]),sep="")
#    res = paste0(char_vec[1:length(char_vec)],n,sep="")
return(res)
}
paste_chars(c("a", "b"))
paste_chars(c("a", "b",'c'))
paste_chars(c("a", "b","c"))
paste_chars <- function(char_vec){
#  n = char_vec[1:length(char_vec)]
res = paste(c(char_vec[1:length(char_vec)],char_vec[1:length(char_vec)]),c(char_vec[1:length(char_vec)],char_vec[length(char_vec):1]),sep="")
#    res = paste0(char_vec[1:length(char_vec)],n,sep="")
return(res)
}
paste_chars(c("a", "b", "c"))
c('a','b')*3
[c('a','b')]*3
c(('a','b')*3)
as1=c('a','b')
as1
as1*3
rep(as1, each=3)
paste_chars <- function(char_vec){
n1=length(char_vec)
#  n = char_vec[1:length(char_vec)]
#  res = paste(c(char_vec[1:n1],char_vec[1:n1]),c(char_vec[1:n1],char_vec[n1:1]),sep="")
#    res = paste0(char_vec[1:length(char_vec)],n,sep="")
res = paste(rep(char_vec, each=3),char_vec,sep="")
return(res)
}
paste_chars(c("a", "b"))
paste_chars <- function(char_vec){
n1=length(char_vec)
#  n = char_vec[1:length(char_vec)]
#  res = paste(c(char_vec[1:n1],char_vec[1:n1]),c(char_vec[1:n1],char_vec[n1:1]),sep="")
#    res = paste0(char_vec[1:length(char_vec)],n,sep="")
res = paste(rep(char_vec, each=n1),char_vec,sep="")
return(res)
}
paste_chars(c("a", "b"))
paste_chars(c("a", "b", "c"))
name <- "John Andrew Thomas"
split(name)
strsplit(name)
strsplit(name,'')
length(strsplit(name,''))
strsplit(name,split='')
strsplit(name,split=' ')
length(strsplit(name,split=' '))
name_Splt = unlist(strsplit(name,split=' '))
summary(name_Splt)
name_Splt[1]
name_Splt[2]
name_Splt[3]
generate_email <- function(name) {
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('gmail'), sep=';', collapse='@')
return res
}
generate_email <- function(name) {
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('gmail'), sep=';', collapse='@')
return(res)
}
generate_email("John Andrew Thomas")
generate_email <- function(name) {
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')
return(res)
}
generate_email("John Andrew Thomas")
generate_email(" ")
name_Splt
name_Splt= unlist(strsplit("   ",split=' '))
name_Splt
summary(name_Splt)
generate_email <- function(name) {
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')
return(res)
}
generate_email("John Andrew Thomas")
generate_email(" ")
grepl("^\\s*$","  ")
generate_email <- function(name) {
if (grepl("^\\s*$", your_string)==TRUE){
res=""} else{
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')
}
return(res)
}
generate_email(" ")
generate_email <- function(name) {
if (grepl("^\\s*$", your_string)==TRUE){
res="" }  else{
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')
}  return(res)
}
generate_email <- function(name) {
if (grepl("^\\s*$", your_string)==TRUE){
res="" }  else{
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')}
return(res)
}
generate_email(" ")
if (grepl("^\\s*$", '')
==TRUE
{2+2}
isTRUE(grepl("^\\s*$", '')
}
isTRUE(grepl("^\\s*$", '  '))
isTRUE(grepl("^\\s*$", '  e'))
generate_email <- function(name) {
if (isTRUE(grepl("^\\s*$",name))){
res="" }  else{
name_Splt = unlist(strsplit(name,split=' '))
res = paste(name_Splt, c('@gmail.com'), sep='', collapse=';')
}
return(res)
}
generate_email(" ")
generate_email("John Andrew Thomas")
string <- "  Hi buddy   what's up   Bro "
library(stringr)
str_replace(gsub("\\s+", " ", str_trim(string)), "B", "b")
str_replace(gsub("\\s+", " ", str_trim(string)))
library(qdapRegex)
rm_white(string)
install.packages("qdapRegex")
library(qdapRegex)
rm_white(string)
rm_white("    John Andrew Thomas")
name <- "John Andrew Thomas"
name <- "John Andrew   Thomas"
name= rm_white(name)
name
name <- "John Andrew   Thomas"
name
gsub("\\s+"," ",name)
name <- "  John Andrew   Thomas"
gsub("\\s+"," ",name)
name <- "  John Andrew   Thomas  "
gsub("\\s+"," ",name)
trimws(name)
name
trimws(name)
gsub("\\s+"," ",name)
n1=gsub("\\s+"," ",name)
trimws(n1)
days = c("Friday", "Sunday", "Monday", "Sunday", "Wednesday")
days=factor(days)
days
days = c("Friday", "Sunday", "Monday", "Sunday", "Wednesday")
days1=paste(days,sep = '<')
days1
days1=paste(days,collapse= '<')
days1
days1=paste(days,collapse= ' < ')
days1
days1=factor(paste(days,collapse= ' < '))
days1
days = c("Friday", "Sunday", "Monday", "Sunday", "Wednesday")
days2= days1(levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"))
days2= (days1, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"))
days2= days1, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday")
days1=factor(paste(days,collapse= ' < '),levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"))
days1
days1=factor(paste(days,collapse= ' < '))
days1
days1=factor(days1,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"))
days1
factor(days,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"),ordered=TRUE)
days
days1=factor(days,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"),ordered=TRUE)
days1
days1=factor(days,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"),ordered=FALSE)
days1
days = c("Friday", "Sunday", "Monday", "Sunday", "Wednesday")
days=factor(days,levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday","Sunday"),ordered=TRUE)
days
summary(days)
descibe(days)
description(days)
fert = c(10,20,20,50,10,20,10,50,20)
summary(fert)
fert1 = factor(fert,levels=c(10,20,50),ordered=TRUE)
summary(fert1)
fert = c(10,20,20,50,10,20,10,50,20,30)
summary(fert)
fert1 = factor(fert,levels=c(10,20,50),ordered=TRUE)
summary(fert1)
as.numeric(levels(fert)[fert])
as.numeric(levels(fert1)[fert1])
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}else{
(testvalue =testvalue- 1)
}
}
return(res)
}
gcdIter(10,4)
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}else{
(testvalue =testvalue- 1)
}
}
return(res)
}
summary(getIter)
summary(gcdIter)
gcdIter
gcdIter(10,20)
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}else{
(testvalue =testvalue- 1)
}
}
return(res)
}
testvalue =testvalue- 1
testvalue=5
testvalue =testvalue- 1
testvalue
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
break
}
testvalue =testvalue- 1
}
return(res)
}
gcdIter(4,5)
gcdIter(4,6)
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
}else{
res=gcd(c, d %% c)
}
return(res)
}
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
break
}else{
res=gcd(c, d %% c)
}
return(res)
}
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
break
}else{
res=gcd(c, d %% c)
}
return(res)
}
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0)
res=c
break
else{
res=gcd(c, d %% c)
}
return(res)
}
gcd <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
break
}else{
res=gcd(c, d %% c)
}
return(res)
}
gcdRecur <- function(a, b){
c = min(a,b)
d = max(a,b)
If (d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
return(res)
}
5%%3=0
5%%3==0
a=2
b=5
c=min(a,b)
d=max(a,b)
c
d
If (d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
If (d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
return(res)
gcdRecur <- function(a, b){
c = min(a,b)
d = max(a,b)
If(d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
return(res)
}
d%%c==0
gcdRecur <- function(a, b){
c = min(a,b)
d = max(a,b)
if(d%%c==0){
res=c
break
}else{
res=gcdRecur(c, d %% c)
}
return(res)
}
gcdRecur(54,20)
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}
testvalue =testvalue- 1
}
return(res)
}
gcdIter(4,6)
gcdIter <- function(a, b){
testvalue = min(a,b)
while (testvalue > 0){
if (a %%testvalue == 0 & b %% testvalue == 0){
res = testvalue
}else{
testvalue =testvalue- 1
}
}
return(res)
}
gcdIter(4,6)
A
n=1:15
r=0.115
P=5000
A = P*(1+r)^n
A
print(A)
mass = c(180,165,160,193)
height =c(87,58,65,100)
BMI = mass/(height*0.01)^2
height>6
height>6*12*2.54
height
height = c(180,165,160,193)
mass =c(87,58,65,100)
BMI = mass/(height*0.01)^2
height>6*12*2.54
data(cars)
head(cars)
head(cars,5)
head(cars)
View(cars)
dim(cars)[1]
cars_dim=dim(cars)
cars_dim=dim(cars)
cars_dim
dim(cars_dim)
class(cars_dim)
cars_dim[1]
cars_dim[2]
cars$state = sample(c('NY', 'CA', 'CT'), cars_dim[1])
cars$state = sample(c('NY', 'CA', 'CT'), cars_dim[1], replace=TRUE)
View(cars)
set.seed(0)
cars$state = sample(c('NY', 'CA', 'CT'), cars_dim[1], replace=TRUE)
View(cars)
head(cars,5)
nrows(cars[(cars$state=='CT'),])
nrow(cars[(cars$state=='CT'),])
nrow(cars[(cars$state=='NY'),])
nrow(cars[(cars$state=='CA'),])
cars$ratio = cars$dist/cars$speed
avg = mean(cars$ratio)
st_ratio = sd(cars$ratio)
avg
st_ratio
cars_avg = mean(cars$ratio)
cars_std = sd(cars$ratio)
print('average ratio ='cars_avg)
print({'average ratio ='cars_avg})
print('average ratio =')
print('average ratio =',print({'average rat)
}
{}
)
)))
sds
exit
print({'average ratio ='cars_avg})
print(['average ratio ='cars_avg])
print(('average ratio ='cars_avg))
sprintf(average ratio = %1.23f",cars_avg)
sprintf("average ratio = %1.23f",cars_avg)
sprintf("average ratio = %1.11f",cars_avg)
sprintf("average ratio = %1.1f",cars_avg)
sprintf("average ratio = %1.10f",cars_avg)
cars_avg
exit
quit()
exit
quit()
install.packages("igraph")
quit()
setwd("~/Dropbox/ted-talks/")
load("data.RData")
library(anytime)
library(dplyr)
library(ggplot2)
library(stringr)
library(treemap)
library(qdapRegex)
library(googleVis)
library(rjson)
library(rsconnect)
library(wordcloud)
library(tm)
library(DT)
library(corrplot)
library(plyr)
ted %>% group_by(year) %>% summarise(mean_C_1000_V=mean(Comments_per_1000views.C_1K_V))
mean_C_1000_V
ted %>% group_by(year) %>% summarize(mean_C_1000_V=mean(Comments_per_1000views.C_1K_V))
ted %>% group_by(year) %>% summarize(mean_C_1000_V=mean(Comments_per_1000views.C_1K_V,na.rm=TRUE))
View(ted)
ted %>% group_by(year) %>% mean(Comments_per_1000views.C_1K_V,na.rm=TRUE)
class(ted$Comments_per_1000views.C_1K_V)
mean(ted$Comments_per_1000views.C_1K_V,group_by(year))
mean(ted$Comments_per_1000views.C_1K_V,group_by(ted$year))
mean(ted$Comments_per_1000views.C_1K_V,group_by(ted$year_num))
ted %>% group_by(year_num) %>% mean(Comments_per_1000views.C_1K_V,na.rm=TRUE)
ted %>% group_by(year_num) %>% summarize(mena_CperV=mean(Comments_per_1000views.C_1K_V,na.rm=TRUE))
detach(package:plyr)
ted %>% group_by(year_num) %>% summarize(mena_CperV=mean(Comments_per_1000views.C_1K_V,na.rm=TRUE))
mena_CperV
ted %>% group_by(year_num) %>% summarize(mean_CperV=mean(Comments_per_1000views.C_1K_V,na.rm=TRUE))
mean_CperV= ted %>% group_by(year_num) %>% summarize(mean_CperV=mean(Comments_per_1000views.C_1K_V,na.rm=TRUE))
View(mean_CperV)
median_CperV= ted %>% group_by(year_num) %>% summarize(median_CperV=median(Comments_per_1000views.C_1K_V,na.rm=TRUE))
View(median_CperV)
library('ReadImages')
install.packages("library('ReadImages')")
library(jpeg)
install.packages("library(jpeg)")
install.packages("jpeg")
library(jpeg)
ted_rating_image = readJPEG(system.file("img", "ted_talks_ratings_top.jpeg", package="jpeg"))
readJPEG("ted_talks_ratings_top.jpeg", native = FALSE)
ted_rating_image=readJPEG("ted_talks_ratings_top.jpeg", native = FALSE)
save(ted_rating_image,ted,talks_year,ratings,MW,MW_LC,LW_MC,MW_MC,ted_speaker_occupation,ted_corr,df_final,mean_CperV,median_CperV,file = "data.RData")
shiny::runApp('ted_talks')
